# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from reflex_msgs/Motor.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Motor(genpy.Message):
  _md5sum = "66d6779b4fae4b7b68e0863263c3993c"
  _type = "reflex_msgs/Motor"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 joint_angle
float64 raw_angle
float64 velocity
float64 load
float64 voltage
int32 temperature
string error_state
"""
  __slots__ = ['joint_angle','raw_angle','velocity','load','voltage','temperature','error_state']
  _slot_types = ['float64','float64','float64','float64','float64','int32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_angle,raw_angle,velocity,load,voltage,temperature,error_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Motor, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint_angle is None:
        self.joint_angle = 0.
      if self.raw_angle is None:
        self.raw_angle = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.load is None:
        self.load = 0.
      if self.voltage is None:
        self.voltage = 0.
      if self.temperature is None:
        self.temperature = 0
      if self.error_state is None:
        self.error_state = ''
    else:
      self.joint_angle = 0.
      self.raw_angle = 0.
      self.velocity = 0.
      self.load = 0.
      self.voltage = 0.
      self.temperature = 0
      self.error_state = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5di().pack(_x.joint_angle, _x.raw_angle, _x.velocity, _x.load, _x.voltage, _x.temperature))
      _x = self.error_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.joint_angle, _x.raw_angle, _x.velocity, _x.load, _x.voltage, _x.temperature,) = _get_struct_5di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_state = str[start:end].decode('utf-8')
      else:
        self.error_state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5di().pack(_x.joint_angle, _x.raw_angle, _x.velocity, _x.load, _x.voltage, _x.temperature))
      _x = self.error_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.joint_angle, _x.raw_angle, _x.velocity, _x.load, _x.voltage, _x.temperature,) = _get_struct_5di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_state = str[start:end].decode('utf-8')
      else:
        self.error_state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5di = None
def _get_struct_5di():
    global _struct_5di
    if _struct_5di is None:
        _struct_5di = struct.Struct("<5di")
    return _struct_5di
