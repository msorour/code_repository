# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from reflex_msgs/Hand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import reflex_msgs.msg

class Hand(genpy.Message):
  _md5sum = "5328a4ca4ff4a136db2555c3178a3e1b"
  _type = "reflex_msgs/Hand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# message for ReFlex Hand
Finger[3] finger       # Hold out your right hand palm up, with pointer finger, middle finger and thumb extended
                       # Pointer = finger[0], Middle = finger[1], Thumb = finger[2]
Motor[4] motor         # Finger 1, Finger 2, Finger 3, and Preshape

================================================================================
MSG: reflex_msgs/Finger
# message for ReFlex Fingers
float32 proximal		# radians, measured from all open = 0, to pi = closed
float32 distal_approx   # radians, measured from all open = 0, to roughly pi = against proximal pad, relative to prox link
bool[9] contact			# binary, 0 = proximal, 8 = fingertip
float32[9] pressure		# scalar, dimensionless units, 0 = proximal, 8 = fingertip (can go negative)

================================================================================
MSG: reflex_msgs/Motor
float64 joint_angle
float64 raw_angle
float64 velocity
float64 load
float64 voltage
int32 temperature
string error_state
"""
  __slots__ = ['finger','motor']
  _slot_types = ['reflex_msgs/Finger[3]','reflex_msgs/Motor[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       finger,motor

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Hand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.finger is None:
        self.finger = [reflex_msgs.msg.Finger() for _ in range(3)]
      if self.motor is None:
        self.motor = [reflex_msgs.msg.Motor() for _ in range(4)]
    else:
      self.finger = [reflex_msgs.msg.Finger() for _ in range(3)]
      self.motor = [reflex_msgs.msg.Motor() for _ in range(4)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      if len(self.finger) != 3:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (3, len(self.finger), 'self.finger')))
      for val1 in self.finger:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.proximal, _x.distal_approx))
        buff.write(_get_struct_9B().pack(*val1.contact))
        buff.write(_get_struct_9f().pack(*val1.pressure))
      if len(self.motor) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.motor), 'self.motor')))
      for val1 in self.motor:
        _x = val1
        buff.write(_get_struct_5di().pack(_x.joint_angle, _x.raw_angle, _x.velocity, _x.load, _x.voltage, _x.temperature))
        _x = val1.error_state
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.finger is None:
        self.finger = None
      if self.motor is None:
        self.motor = None
      end = 0
      self.finger = []
      for i in range(0, 3):
        val1 = reflex_msgs.msg.Finger()
        _x = val1
        start = end
        end += 8
        (_x.proximal, _x.distal_approx,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 9
        val1.contact = _get_struct_9B().unpack(str[start:end])
        val1.contact = list(map(bool, val1.contact))
        start = end
        end += 36
        val1.pressure = _get_struct_9f().unpack(str[start:end])
        self.finger.append(val1)
      self.motor = []
      for i in range(0, 4):
        val1 = reflex_msgs.msg.Motor()
        _x = val1
        start = end
        end += 44
        (_x.joint_angle, _x.raw_angle, _x.velocity, _x.load, _x.voltage, _x.temperature,) = _get_struct_5di().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.error_state = str[start:end].decode('utf-8')
        else:
          val1.error_state = str[start:end]
        self.motor.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      if len(self.finger) != 3:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (3, len(self.finger), 'self.finger')))
      for val1 in self.finger:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.proximal, _x.distal_approx))
        buff.write(val1.contact.tostring())
        buff.write(val1.pressure.tostring())
      if len(self.motor) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.motor), 'self.motor')))
      for val1 in self.motor:
        _x = val1
        buff.write(_get_struct_5di().pack(_x.joint_angle, _x.raw_angle, _x.velocity, _x.load, _x.voltage, _x.temperature))
        _x = val1.error_state
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.finger is None:
        self.finger = None
      if self.motor is None:
        self.motor = None
      end = 0
      self.finger = []
      for i in range(0, 3):
        val1 = reflex_msgs.msg.Finger()
        _x = val1
        start = end
        end += 8
        (_x.proximal, _x.distal_approx,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 9
        val1.contact = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=9)
        val1.contact = list(map(bool, val1.contact))
        start = end
        end += 36
        val1.pressure = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
        self.finger.append(val1)
      self.motor = []
      for i in range(0, 4):
        val1 = reflex_msgs.msg.Motor()
        _x = val1
        start = end
        end += 44
        (_x.joint_angle, _x.raw_angle, _x.velocity, _x.load, _x.voltage, _x.temperature,) = _get_struct_5di().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.error_state = str[start:end].decode('utf-8')
        else:
          val1.error_state = str[start:end]
        self.motor.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_5di = None
def _get_struct_5di():
    global _struct_5di
    if _struct_5di is None:
        _struct_5di = struct.Struct("<5di")
    return _struct_5di
_struct_9B = None
def _get_struct_9B():
    global _struct_9B
    if _struct_9B is None:
        _struct_9B = struct.Struct("<9B")
    return _struct_9B
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
