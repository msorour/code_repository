# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from reflex_msgs/Finger.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Finger(genpy.Message):
  _md5sum = "b5232f74e901b48063f64cfc32aefbe0"
  _type = "reflex_msgs/Finger"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# message for ReFlex Fingers
float32 proximal		# radians, measured from all open = 0, to pi = closed
float32 distal_approx   # radians, measured from all open = 0, to roughly pi = against proximal pad, relative to prox link
bool[9] contact			# binary, 0 = proximal, 8 = fingertip
float32[9] pressure		# scalar, dimensionless units, 0 = proximal, 8 = fingertip (can go negative)
"""
  __slots__ = ['proximal','distal_approx','contact','pressure']
  _slot_types = ['float32','float32','bool[9]','float32[9]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       proximal,distal_approx,contact,pressure

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Finger, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.proximal is None:
        self.proximal = 0.
      if self.distal_approx is None:
        self.distal_approx = 0.
      if self.contact is None:
        self.contact = [False] * 9
      if self.pressure is None:
        self.pressure = [0.] * 9
    else:
      self.proximal = 0.
      self.distal_approx = 0.
      self.contact = [False] * 9
      self.pressure = [0.] * 9

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f().pack(_x.proximal, _x.distal_approx))
      buff.write(_get_struct_9B().pack(*self.contact))
      buff.write(_get_struct_9f().pack(*self.pressure))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.proximal, _x.distal_approx,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 9
      self.contact = _get_struct_9B().unpack(str[start:end])
      self.contact = list(map(bool, self.contact))
      start = end
      end += 36
      self.pressure = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f().pack(_x.proximal, _x.distal_approx))
      buff.write(self.contact.tostring())
      buff.write(self.pressure.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.proximal, _x.distal_approx,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 9
      self.contact = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=9)
      self.contact = list(map(bool, self.contact))
      start = end
      end += 36
      self.pressure = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_9B = None
def _get_struct_9B():
    global _struct_9B
    if _struct_9B is None:
        _struct_9B = struct.Struct("<9B")
    return _struct_9B
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
