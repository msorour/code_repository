# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from reflex_one_msgs/SetTactileThresholdRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import reflex_one_msgs.msg

class SetTactileThresholdRequest(genpy.Message):
  _md5sum = "01cec83f9d223083364c730460331524"
  _type = "reflex_one_msgs/SetTactileThresholdRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# message for calling setting pressure thresholds on various fingers
FingerPressure[3] finger

================================================================================
MSG: reflex_one_msgs/FingerPressure
# message for pressure on a single finger
uint16[9] sensor    	# The sensors enumerate from the base of the finger to the tip
						# There are 5 on the proximal link, 4 on the distal
"""
  __slots__ = ['finger']
  _slot_types = ['reflex_one_msgs/FingerPressure[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       finger

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetTactileThresholdRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.finger is None:
        self.finger = [reflex_one_msgs.msg.FingerPressure() for _ in range(3)]
    else:
      self.finger = [reflex_one_msgs.msg.FingerPressure() for _ in range(3)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      if len(self.finger) != 3:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (3, len(self.finger), 'self.finger')))
      for val1 in self.finger:
        buff.write(_get_struct_9H().pack(*val1.sensor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.finger is None:
        self.finger = None
      end = 0
      self.finger = []
      for i in range(0, 3):
        val1 = reflex_one_msgs.msg.FingerPressure()
        start = end
        end += 18
        val1.sensor = _get_struct_9H().unpack(str[start:end])
        self.finger.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      if len(self.finger) != 3:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (3, len(self.finger), 'self.finger')))
      for val1 in self.finger:
        buff.write(val1.sensor.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.finger is None:
        self.finger = None
      end = 0
      self.finger = []
      for i in range(0, 3):
        val1 = reflex_one_msgs.msg.FingerPressure()
        start = end
        end += 18
        val1.sensor = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=9)
        self.finger.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9H = None
def _get_struct_9H():
    global _struct_9H
    if _struct_9H is None:
        _struct_9H = struct.Struct("<9H")
    return _struct_9H
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from reflex_one_msgs/SetTactileThresholdResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetTactileThresholdResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "reflex_one_msgs/SetTactileThresholdResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetTactileThresholdResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class SetTactileThreshold(object):
  _type          = 'reflex_one_msgs/SetTactileThreshold'
  _md5sum = '01cec83f9d223083364c730460331524'
  _request_class  = SetTactileThresholdRequest
  _response_class = SetTactileThresholdResponse
