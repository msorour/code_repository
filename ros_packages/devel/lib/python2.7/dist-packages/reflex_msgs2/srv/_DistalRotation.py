# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from reflex_msgs2/DistalRotationRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DistalRotationRequest(genpy.Message):
  _md5sum = "95c6d42d4818f388398c524197385198"
  _type = "reflex_msgs2/DistalRotationRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# message for reading IMU rotations
float32[4] palm_imu_quat
float32 joint_angle
float32 proximal
float32[4] finger_imu_quat
"""
  __slots__ = ['palm_imu_quat','joint_angle','proximal','finger_imu_quat']
  _slot_types = ['float32[4]','float32','float32','float32[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       palm_imu_quat,joint_angle,proximal,finger_imu_quat

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DistalRotationRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.palm_imu_quat is None:
        self.palm_imu_quat = [0.] * 4
      if self.joint_angle is None:
        self.joint_angle = 0.
      if self.proximal is None:
        self.proximal = 0.
      if self.finger_imu_quat is None:
        self.finger_imu_quat = [0.] * 4
    else:
      self.palm_imu_quat = [0.] * 4
      self.joint_angle = 0.
      self.proximal = 0.
      self.finger_imu_quat = [0.] * 4

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_4f().pack(*self.palm_imu_quat))
      _x = self
      buff.write(_get_struct_2f().pack(_x.joint_angle, _x.proximal))
      buff.write(_get_struct_4f().pack(*self.finger_imu_quat))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 16
      self.palm_imu_quat = _get_struct_4f().unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.joint_angle, _x.proximal,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 16
      self.finger_imu_quat = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.palm_imu_quat.tostring())
      _x = self
      buff.write(_get_struct_2f().pack(_x.joint_angle, _x.proximal))
      buff.write(self.finger_imu_quat.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 16
      self.palm_imu_quat = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      _x = self
      start = end
      end += 8
      (_x.joint_angle, _x.proximal,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 16
      self.finger_imu_quat = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from reflex_msgs2/DistalRotationResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DistalRotationResponse(genpy.Message):
  _md5sum = "8d2ccfdfc1a5ba6babe40fd5c7c04dee"
  _type = "reflex_msgs2/DistalRotationResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32[3] rotation

"""
  __slots__ = ['rotation']
  _slot_types = ['float32[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rotation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DistalRotationResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rotation is None:
        self.rotation = [0.] * 3
    else:
      self.rotation = [0.] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3f().pack(*self.rotation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 12
      self.rotation = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.rotation.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 12
      self.rotation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
class DistalRotation(object):
  _type          = 'reflex_msgs2/DistalRotation'
  _md5sum = '96436694e12dc909600e6760ed1174cd'
  _request_class  = DistalRotationRequest
  _response_class = DistalRotationResponse
