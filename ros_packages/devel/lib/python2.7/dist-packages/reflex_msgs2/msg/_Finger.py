# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from reflex_msgs2/Finger.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import reflex_msgs2.msg

class Finger(genpy.Message):
  _md5sum = "dd9fd34e802991303a3664f122843051"
  _type = "reflex_msgs2/Finger"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# message for ReFlex Fingers
float32 proximal		# radians, measured from all open = 0, to pi = closed
float32 distal_approx   # radians, measured from all open = 0, to roughly pi = against proximal pad, relative to prox link

bool[14] contact			# binary, 0 = proximal, 8 = fingertip
float32[14] pressure		# scalar, dimensionless units, 0 = proximal, 8 = fingertip (can go negative)
Imu imu
================================================================================
MSG: reflex_msgs2/Imu
# quaternion reading from IMU (w, x, y, z)
float32[4] quat	
float32[3] euler_angles 

# these are defined in reflex_hand.h driver
uint8 calibration_status 
uint16[11] calibration_data
"""
  __slots__ = ['proximal','distal_approx','contact','pressure','imu']
  _slot_types = ['float32','float32','bool[14]','float32[14]','reflex_msgs2/Imu']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       proximal,distal_approx,contact,pressure,imu

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Finger, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.proximal is None:
        self.proximal = 0.
      if self.distal_approx is None:
        self.distal_approx = 0.
      if self.contact is None:
        self.contact = [False] * 14
      if self.pressure is None:
        self.pressure = [0.] * 14
      if self.imu is None:
        self.imu = reflex_msgs2.msg.Imu()
    else:
      self.proximal = 0.
      self.distal_approx = 0.
      self.contact = [False] * 14
      self.pressure = [0.] * 14
      self.imu = reflex_msgs2.msg.Imu()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f().pack(_x.proximal, _x.distal_approx))
      buff.write(_get_struct_14B().pack(*self.contact))
      buff.write(_get_struct_14f().pack(*self.pressure))
      buff.write(_get_struct_4f().pack(*self.imu.quat))
      buff.write(_get_struct_3f().pack(*self.imu.euler_angles))
      _x = self.imu.calibration_status
      buff.write(_get_struct_B().pack(_x))
      buff.write(_get_struct_11H().pack(*self.imu.calibration_data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.imu is None:
        self.imu = reflex_msgs2.msg.Imu()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.proximal, _x.distal_approx,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 14
      self.contact = _get_struct_14B().unpack(str[start:end])
      self.contact = list(map(bool, self.contact))
      start = end
      end += 56
      self.pressure = _get_struct_14f().unpack(str[start:end])
      start = end
      end += 16
      self.imu.quat = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 12
      self.imu.euler_angles = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 1
      (self.imu.calibration_status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 22
      self.imu.calibration_data = _get_struct_11H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f().pack(_x.proximal, _x.distal_approx))
      buff.write(self.contact.tostring())
      buff.write(self.pressure.tostring())
      buff.write(self.imu.quat.tostring())
      buff.write(self.imu.euler_angles.tostring())
      _x = self.imu.calibration_status
      buff.write(_get_struct_B().pack(_x))
      buff.write(self.imu.calibration_data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.imu is None:
        self.imu = reflex_msgs2.msg.Imu()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.proximal, _x.distal_approx,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 14
      self.contact = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=14)
      self.contact = list(map(bool, self.contact))
      start = end
      end += 56
      self.pressure = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=14)
      start = end
      end += 16
      self.imu.quat = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 12
      self.imu.euler_angles = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 1
      (self.imu.calibration_status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 22
      self.imu.calibration_data = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=11)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11H = None
def _get_struct_11H():
    global _struct_11H
    if _struct_11H is None:
        _struct_11H = struct.Struct("<11H")
    return _struct_11H
_struct_14B = None
def _get_struct_14B():
    global _struct_14B
    if _struct_14B is None:
        _struct_14B = struct.Struct("<14B")
    return _struct_14B
_struct_14f = None
def _get_struct_14f():
    global _struct_14f
    if _struct_14f is None:
        _struct_14f = struct.Struct("<14f")
    return _struct_14f
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
