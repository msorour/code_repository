# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from reflex_msgs2/ImuCalibrationData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ImuCalibrationData(genpy.Message):
  _md5sum = "1ef3e1b102a68813a645fa51b970838b"
  _type = "reflex_msgs2/ImuCalibrationData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Acceleration offsets for each dimension in the format [x,y,z]
uint16[3] acc_offset_f1
uint16[3] acc_offset_f2
uint16[3] acc_offset_f3
uint16[3] acc_offset_palm

# Magnetometer offsets for each dimension in the format [x,y,z]
uint16[3] mag_offset_f1
uint16[3] mag_offset_f2
uint16[3] mag_offset_f3
uint16[3] mag_offset_palm

# Gyroscope offsets for each dimension in the format [x,y,z]
uint16[3] gyr_offset_f1
uint16[3] gyr_offset_f2
uint16[3] gyr_offset_f3
uint16[3] gyr_offset_palm

# Accelerometer and Gyroscope radius in the format [f1,f2,f3,palm]
uint16[4] acc_radius
uint16[4] gyr_radius"""
  __slots__ = ['acc_offset_f1','acc_offset_f2','acc_offset_f3','acc_offset_palm','mag_offset_f1','mag_offset_f2','mag_offset_f3','mag_offset_palm','gyr_offset_f1','gyr_offset_f2','gyr_offset_f3','gyr_offset_palm','acc_radius','gyr_radius']
  _slot_types = ['uint16[3]','uint16[3]','uint16[3]','uint16[3]','uint16[3]','uint16[3]','uint16[3]','uint16[3]','uint16[3]','uint16[3]','uint16[3]','uint16[3]','uint16[4]','uint16[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       acc_offset_f1,acc_offset_f2,acc_offset_f3,acc_offset_palm,mag_offset_f1,mag_offset_f2,mag_offset_f3,mag_offset_palm,gyr_offset_f1,gyr_offset_f2,gyr_offset_f3,gyr_offset_palm,acc_radius,gyr_radius

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ImuCalibrationData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.acc_offset_f1 is None:
        self.acc_offset_f1 = [0] * 3
      if self.acc_offset_f2 is None:
        self.acc_offset_f2 = [0] * 3
      if self.acc_offset_f3 is None:
        self.acc_offset_f3 = [0] * 3
      if self.acc_offset_palm is None:
        self.acc_offset_palm = [0] * 3
      if self.mag_offset_f1 is None:
        self.mag_offset_f1 = [0] * 3
      if self.mag_offset_f2 is None:
        self.mag_offset_f2 = [0] * 3
      if self.mag_offset_f3 is None:
        self.mag_offset_f3 = [0] * 3
      if self.mag_offset_palm is None:
        self.mag_offset_palm = [0] * 3
      if self.gyr_offset_f1 is None:
        self.gyr_offset_f1 = [0] * 3
      if self.gyr_offset_f2 is None:
        self.gyr_offset_f2 = [0] * 3
      if self.gyr_offset_f3 is None:
        self.gyr_offset_f3 = [0] * 3
      if self.gyr_offset_palm is None:
        self.gyr_offset_palm = [0] * 3
      if self.acc_radius is None:
        self.acc_radius = [0] * 4
      if self.gyr_radius is None:
        self.gyr_radius = [0] * 4
    else:
      self.acc_offset_f1 = [0] * 3
      self.acc_offset_f2 = [0] * 3
      self.acc_offset_f3 = [0] * 3
      self.acc_offset_palm = [0] * 3
      self.mag_offset_f1 = [0] * 3
      self.mag_offset_f2 = [0] * 3
      self.mag_offset_f3 = [0] * 3
      self.mag_offset_palm = [0] * 3
      self.gyr_offset_f1 = [0] * 3
      self.gyr_offset_f2 = [0] * 3
      self.gyr_offset_f3 = [0] * 3
      self.gyr_offset_palm = [0] * 3
      self.acc_radius = [0] * 4
      self.gyr_radius = [0] * 4

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3H().pack(*self.acc_offset_f1))
      buff.write(_get_struct_3H().pack(*self.acc_offset_f2))
      buff.write(_get_struct_3H().pack(*self.acc_offset_f3))
      buff.write(_get_struct_3H().pack(*self.acc_offset_palm))
      buff.write(_get_struct_3H().pack(*self.mag_offset_f1))
      buff.write(_get_struct_3H().pack(*self.mag_offset_f2))
      buff.write(_get_struct_3H().pack(*self.mag_offset_f3))
      buff.write(_get_struct_3H().pack(*self.mag_offset_palm))
      buff.write(_get_struct_3H().pack(*self.gyr_offset_f1))
      buff.write(_get_struct_3H().pack(*self.gyr_offset_f2))
      buff.write(_get_struct_3H().pack(*self.gyr_offset_f3))
      buff.write(_get_struct_3H().pack(*self.gyr_offset_palm))
      buff.write(_get_struct_4H().pack(*self.acc_radius))
      buff.write(_get_struct_4H().pack(*self.gyr_radius))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 6
      self.acc_offset_f1 = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 6
      self.acc_offset_f2 = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 6
      self.acc_offset_f3 = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 6
      self.acc_offset_palm = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 6
      self.mag_offset_f1 = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 6
      self.mag_offset_f2 = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 6
      self.mag_offset_f3 = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 6
      self.mag_offset_palm = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 6
      self.gyr_offset_f1 = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 6
      self.gyr_offset_f2 = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 6
      self.gyr_offset_f3 = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 6
      self.gyr_offset_palm = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 8
      self.acc_radius = _get_struct_4H().unpack(str[start:end])
      start = end
      end += 8
      self.gyr_radius = _get_struct_4H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.acc_offset_f1.tostring())
      buff.write(self.acc_offset_f2.tostring())
      buff.write(self.acc_offset_f3.tostring())
      buff.write(self.acc_offset_palm.tostring())
      buff.write(self.mag_offset_f1.tostring())
      buff.write(self.mag_offset_f2.tostring())
      buff.write(self.mag_offset_f3.tostring())
      buff.write(self.mag_offset_palm.tostring())
      buff.write(self.gyr_offset_f1.tostring())
      buff.write(self.gyr_offset_f2.tostring())
      buff.write(self.gyr_offset_f3.tostring())
      buff.write(self.gyr_offset_palm.tostring())
      buff.write(self.acc_radius.tostring())
      buff.write(self.gyr_radius.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 6
      self.acc_offset_f1 = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.acc_offset_f2 = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.acc_offset_f3 = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.acc_offset_palm = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.mag_offset_f1 = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.mag_offset_f2 = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.mag_offset_f3 = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.mag_offset_palm = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.gyr_offset_f1 = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.gyr_offset_f2 = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.gyr_offset_f3 = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 6
      self.gyr_offset_palm = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 8
      self.acc_radius = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=4)
      start = end
      end += 8
      self.gyr_radius = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3H = None
def _get_struct_3H():
    global _struct_3H
    if _struct_3H is None:
        _struct_3H = struct.Struct("<3H")
    return _struct_3H
_struct_4H = None
def _get_struct_4H():
    global _struct_4H
    if _struct_4H is None:
        _struct_4H = struct.Struct("<4H")
    return _struct_4H
