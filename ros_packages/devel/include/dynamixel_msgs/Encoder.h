// Generated by gencpp from file dynamixel_msgs/Encoder.msg
// DO NOT EDIT!


#ifndef DYNAMIXEL_MSGS_MESSAGE_ENCODER_H
#define DYNAMIXEL_MSGS_MESSAGE_ENCODER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamixel_msgs
{
template <class ContainerAllocator>
struct Encoder_
{
  typedef Encoder_<ContainerAllocator> Type;

  Encoder_()
    : timestamp(0.0)
    , encoders()  {
      encoders.assign(0);
  }
  Encoder_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , encoders()  {
  (void)_alloc;
      encoders.assign(0);
  }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef boost::array<uint16_t, 3>  _encoders_type;
  _encoders_type encoders;





  typedef boost::shared_ptr< ::dynamixel_msgs::Encoder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_msgs::Encoder_<ContainerAllocator> const> ConstPtr;

}; // struct Encoder_

typedef ::dynamixel_msgs::Encoder_<std::allocator<void> > Encoder;

typedef boost::shared_ptr< ::dynamixel_msgs::Encoder > EncoderPtr;
typedef boost::shared_ptr< ::dynamixel_msgs::Encoder const> EncoderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamixel_msgs::Encoder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamixel_msgs::Encoder_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamixel_msgs::Encoder_<ContainerAllocator1> & lhs, const ::dynamixel_msgs::Encoder_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.encoders == rhs.encoders;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamixel_msgs::Encoder_<ContainerAllocator1> & lhs, const ::dynamixel_msgs::Encoder_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamixel_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_msgs::Encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_msgs::Encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_msgs::Encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_msgs::Encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_msgs::Encoder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_msgs::Encoder_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_msgs::Encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c3d81a65c121e8aec105f07700f8bd8";
  }

  static const char* value(const ::dynamixel_msgs::Encoder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c3d81a65c121e8aULL;
  static const uint64_t static_value2 = 0xec105f07700f8bd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_msgs::Encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamixel_msgs/Encoder";
  }

  static const char* value(const ::dynamixel_msgs::Encoder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_msgs::Encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timestamp   # encoder state is at this time\n"
"uint16[3] encoders   # value of the encoder state\n"
;
  }

  static const char* value(const ::dynamixel_msgs::Encoder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamixel_msgs::Encoder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.encoders);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Encoder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_msgs::Encoder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamixel_msgs::Encoder_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "encoders[]" << std::endl;
    for (size_t i = 0; i < v.encoders.size(); ++i)
    {
      s << indent << "  encoders[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.encoders[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_MSGS_MESSAGE_ENCODER_H
