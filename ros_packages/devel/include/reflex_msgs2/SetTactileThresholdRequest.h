// Generated by gencpp from file reflex_msgs2/SetTactileThresholdRequest.msg
// DO NOT EDIT!


#ifndef REFLEX_MSGS2_MESSAGE_SETTACTILETHRESHOLDREQUEST_H
#define REFLEX_MSGS2_MESSAGE_SETTACTILETHRESHOLDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <reflex_msgs2/FingerPressure.h>

namespace reflex_msgs2
{
template <class ContainerAllocator>
struct SetTactileThresholdRequest_
{
  typedef SetTactileThresholdRequest_<ContainerAllocator> Type;

  SetTactileThresholdRequest_()
    : finger()  {
    }
  SetTactileThresholdRequest_(const ContainerAllocator& _alloc)
    : finger()  {
  (void)_alloc;
      finger.assign( ::reflex_msgs2::FingerPressure_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::reflex_msgs2::FingerPressure_<ContainerAllocator> , 3>  _finger_type;
  _finger_type finger;





  typedef boost::shared_ptr< ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetTactileThresholdRequest_

typedef ::reflex_msgs2::SetTactileThresholdRequest_<std::allocator<void> > SetTactileThresholdRequest;

typedef boost::shared_ptr< ::reflex_msgs2::SetTactileThresholdRequest > SetTactileThresholdRequestPtr;
typedef boost::shared_ptr< ::reflex_msgs2::SetTactileThresholdRequest const> SetTactileThresholdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator1> & lhs, const ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.finger == rhs.finger;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator1> & lhs, const ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace reflex_msgs2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2d8992c5dc80dcc6a9e73ef557b5387";
  }

  static const char* value(const ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2d8992c5dc80dccULL;
  static const uint64_t static_value2 = 0x6a9e73ef557b5387ULL;
};

template<class ContainerAllocator>
struct DataType< ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reflex_msgs2/SetTactileThresholdRequest";
  }

  static const char* value(const ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# message for calling setting pressure thresholds on various fingers\n"
"FingerPressure[3] finger\n"
"\n"
"================================================================================\n"
"MSG: reflex_msgs2/FingerPressure\n"
"# message for pressure on a single finger\n"
"uint16[14] sensor    	# The sensors enumerate from the base of the finger to the tip\n"
"						# There are 5 on the proximal link, 4 on the distal\n"
;
  }

  static const char* value(const ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.finger);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetTactileThresholdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reflex_msgs2::SetTactileThresholdRequest_<ContainerAllocator>& v)
  {
    s << indent << "finger[]" << std::endl;
    for (size_t i = 0; i < v.finger.size(); ++i)
    {
      s << indent << "  finger[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::reflex_msgs2::FingerPressure_<ContainerAllocator> >::stream(s, indent + "    ", v.finger[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // REFLEX_MSGS2_MESSAGE_SETTACTILETHRESHOLDREQUEST_H
