// Generated by gencpp from file reflex_msgs/RadianServoCommands.msg
// DO NOT EDIT!


#ifndef REFLEX_MSGS_MESSAGE_RADIANSERVOCOMMANDS_H
#define REFLEX_MSGS_MESSAGE_RADIANSERVOCOMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace reflex_msgs
{
template <class ContainerAllocator>
struct RadianServoCommands_
{
  typedef RadianServoCommands_<ContainerAllocator> Type;

  RadianServoCommands_()
    : radian_commands()  {
      radian_commands.assign(0.0);
  }
  RadianServoCommands_(const ContainerAllocator& _alloc)
    : radian_commands()  {
  (void)_alloc;
      radian_commands.assign(0.0);
  }



   typedef boost::array<float, 4>  _radian_commands_type;
  _radian_commands_type radian_commands;





  typedef boost::shared_ptr< ::reflex_msgs::RadianServoCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reflex_msgs::RadianServoCommands_<ContainerAllocator> const> ConstPtr;

}; // struct RadianServoCommands_

typedef ::reflex_msgs::RadianServoCommands_<std::allocator<void> > RadianServoCommands;

typedef boost::shared_ptr< ::reflex_msgs::RadianServoCommands > RadianServoCommandsPtr;
typedef boost::shared_ptr< ::reflex_msgs::RadianServoCommands const> RadianServoCommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reflex_msgs::RadianServoCommands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reflex_msgs::RadianServoCommands_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::reflex_msgs::RadianServoCommands_<ContainerAllocator1> & lhs, const ::reflex_msgs::RadianServoCommands_<ContainerAllocator2> & rhs)
{
  return lhs.radian_commands == rhs.radian_commands;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::reflex_msgs::RadianServoCommands_<ContainerAllocator1> & lhs, const ::reflex_msgs::RadianServoCommands_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace reflex_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::reflex_msgs::RadianServoCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reflex_msgs::RadianServoCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflex_msgs::RadianServoCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflex_msgs::RadianServoCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflex_msgs::RadianServoCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflex_msgs::RadianServoCommands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reflex_msgs::RadianServoCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba1e88d9da1745cdc1900895d8c434b9";
  }

  static const char* value(const ::reflex_msgs::RadianServoCommands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba1e88d9da1745cdULL;
  static const uint64_t static_value2 = 0xc1900895d8c434b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::reflex_msgs::RadianServoCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reflex_msgs/RadianServoCommands";
  }

  static const char* value(const ::reflex_msgs::RadianServoCommands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reflex_msgs::RadianServoCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Sets either radian position or radian/s velocity, depending on control mode\n"
"float32[4] radian_commands\n"
;
  }

  static const char* value(const ::reflex_msgs::RadianServoCommands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reflex_msgs::RadianServoCommands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.radian_commands);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadianServoCommands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reflex_msgs::RadianServoCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reflex_msgs::RadianServoCommands_<ContainerAllocator>& v)
  {
    s << indent << "radian_commands[]" << std::endl;
    for (size_t i = 0; i < v.radian_commands.size(); ++i)
    {
      s << indent << "  radian_commands[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.radian_commands[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // REFLEX_MSGS_MESSAGE_RADIANSERVOCOMMANDS_H
