// Generated by gencpp from file reflex_msgs/Hand.msg
// DO NOT EDIT!


#ifndef REFLEX_MSGS_MESSAGE_HAND_H
#define REFLEX_MSGS_MESSAGE_HAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <reflex_msgs/Finger.h>
#include <reflex_msgs/Motor.h>

namespace reflex_msgs
{
template <class ContainerAllocator>
struct Hand_
{
  typedef Hand_<ContainerAllocator> Type;

  Hand_()
    : finger()
    , motor()  {
    }
  Hand_(const ContainerAllocator& _alloc)
    : finger()
    , motor()  {
  (void)_alloc;
      finger.assign( ::reflex_msgs::Finger_<ContainerAllocator> (_alloc));

      motor.assign( ::reflex_msgs::Motor_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::reflex_msgs::Finger_<ContainerAllocator> , 3>  _finger_type;
  _finger_type finger;

   typedef boost::array< ::reflex_msgs::Motor_<ContainerAllocator> , 4>  _motor_type;
  _motor_type motor;





  typedef boost::shared_ptr< ::reflex_msgs::Hand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reflex_msgs::Hand_<ContainerAllocator> const> ConstPtr;

}; // struct Hand_

typedef ::reflex_msgs::Hand_<std::allocator<void> > Hand;

typedef boost::shared_ptr< ::reflex_msgs::Hand > HandPtr;
typedef boost::shared_ptr< ::reflex_msgs::Hand const> HandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reflex_msgs::Hand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reflex_msgs::Hand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::reflex_msgs::Hand_<ContainerAllocator1> & lhs, const ::reflex_msgs::Hand_<ContainerAllocator2> & rhs)
{
  return lhs.finger == rhs.finger &&
    lhs.motor == rhs.motor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::reflex_msgs::Hand_<ContainerAllocator1> & lhs, const ::reflex_msgs::Hand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace reflex_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::reflex_msgs::Hand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reflex_msgs::Hand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflex_msgs::Hand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflex_msgs::Hand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflex_msgs::Hand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflex_msgs::Hand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reflex_msgs::Hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5328a4ca4ff4a136db2555c3178a3e1b";
  }

  static const char* value(const ::reflex_msgs::Hand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5328a4ca4ff4a136ULL;
  static const uint64_t static_value2 = 0xdb2555c3178a3e1bULL;
};

template<class ContainerAllocator>
struct DataType< ::reflex_msgs::Hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reflex_msgs/Hand";
  }

  static const char* value(const ::reflex_msgs::Hand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reflex_msgs::Hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# message for ReFlex Hand\n"
"Finger[3] finger       # Hold out your right hand palm up, with pointer finger, middle finger and thumb extended\n"
"                       # Pointer = finger[0], Middle = finger[1], Thumb = finger[2]\n"
"Motor[4] motor         # Finger 1, Finger 2, Finger 3, and Preshape\n"
"\n"
"================================================================================\n"
"MSG: reflex_msgs/Finger\n"
"# message for ReFlex Fingers\n"
"float32 proximal		# radians, measured from all open = 0, to pi = closed\n"
"float32 distal_approx   # radians, measured from all open = 0, to roughly pi = against proximal pad, relative to prox link\n"
"bool[9] contact			# binary, 0 = proximal, 8 = fingertip\n"
"float32[9] pressure		# scalar, dimensionless units, 0 = proximal, 8 = fingertip (can go negative)\n"
"\n"
"================================================================================\n"
"MSG: reflex_msgs/Motor\n"
"float64 joint_angle\n"
"float64 raw_angle\n"
"float64 velocity\n"
"float64 load\n"
"float64 voltage\n"
"int32 temperature\n"
"string error_state\n"
;
  }

  static const char* value(const ::reflex_msgs::Hand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reflex_msgs::Hand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.finger);
      stream.next(m.motor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Hand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reflex_msgs::Hand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reflex_msgs::Hand_<ContainerAllocator>& v)
  {
    s << indent << "finger[]" << std::endl;
    for (size_t i = 0; i < v.finger.size(); ++i)
    {
      s << indent << "  finger[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::reflex_msgs::Finger_<ContainerAllocator> >::stream(s, indent + "    ", v.finger[i]);
    }
    s << indent << "motor[]" << std::endl;
    for (size_t i = 0; i < v.motor.size(); ++i)
    {
      s << indent << "  motor[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::reflex_msgs::Motor_<ContainerAllocator> >::stream(s, indent + "    ", v.motor[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // REFLEX_MSGS_MESSAGE_HAND_H
