// Generated by gencpp from file reflex_one_msgs/RawServoCommands.msg
// DO NOT EDIT!


#ifndef REFLEX_ONE_MSGS_MESSAGE_RAWSERVOCOMMANDS_H
#define REFLEX_ONE_MSGS_MESSAGE_RAWSERVOCOMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace reflex_one_msgs
{
template <class ContainerAllocator>
struct RawServoCommands_
{
  typedef RawServoCommands_<ContainerAllocator> Type;

  RawServoCommands_()
    : raw_positions()  {
      raw_positions.assign(0);
  }
  RawServoCommands_(const ContainerAllocator& _alloc)
    : raw_positions()  {
  (void)_alloc;
      raw_positions.assign(0);
  }



   typedef boost::array<uint16_t, 5>  _raw_positions_type;
  _raw_positions_type raw_positions;





  typedef boost::shared_ptr< ::reflex_one_msgs::RawServoCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reflex_one_msgs::RawServoCommands_<ContainerAllocator> const> ConstPtr;

}; // struct RawServoCommands_

typedef ::reflex_one_msgs::RawServoCommands_<std::allocator<void> > RawServoCommands;

typedef boost::shared_ptr< ::reflex_one_msgs::RawServoCommands > RawServoCommandsPtr;
typedef boost::shared_ptr< ::reflex_one_msgs::RawServoCommands const> RawServoCommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reflex_one_msgs::RawServoCommands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reflex_one_msgs::RawServoCommands_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::reflex_one_msgs::RawServoCommands_<ContainerAllocator1> & lhs, const ::reflex_one_msgs::RawServoCommands_<ContainerAllocator2> & rhs)
{
  return lhs.raw_positions == rhs.raw_positions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::reflex_one_msgs::RawServoCommands_<ContainerAllocator1> & lhs, const ::reflex_one_msgs::RawServoCommands_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace reflex_one_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::reflex_one_msgs::RawServoCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reflex_one_msgs::RawServoCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflex_one_msgs::RawServoCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflex_one_msgs::RawServoCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflex_one_msgs::RawServoCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflex_one_msgs::RawServoCommands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reflex_one_msgs::RawServoCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abfb0a2b764b18d11e9f7240ea9e07b7";
  }

  static const char* value(const ::reflex_one_msgs::RawServoCommands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xabfb0a2b764b18d1ULL;
  static const uint64_t static_value2 = 0x1e9f7240ea9e07b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::reflex_one_msgs::RawServoCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reflex_one_msgs/RawServoCommands";
  }

  static const char* value(const ::reflex_one_msgs::RawServoCommands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reflex_one_msgs::RawServoCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16[5] raw_positions\n"
;
  }

  static const char* value(const ::reflex_one_msgs::RawServoCommands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reflex_one_msgs::RawServoCommands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.raw_positions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawServoCommands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reflex_one_msgs::RawServoCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reflex_one_msgs::RawServoCommands_<ContainerAllocator>& v)
  {
    s << indent << "raw_positions[]" << std::endl;
    for (size_t i = 0; i < v.raw_positions.size(); ++i)
    {
      s << indent << "  raw_positions[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.raw_positions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // REFLEX_ONE_MSGS_MESSAGE_RAWSERVOCOMMANDS_H
