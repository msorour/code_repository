// Generated by gencpp from file reflex_one_msgs/PoseCommand.msg
// DO NOT EDIT!


#ifndef REFLEX_ONE_MSGS_MESSAGE_POSECOMMAND_H
#define REFLEX_ONE_MSGS_MESSAGE_POSECOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace reflex_one_msgs
{
template <class ContainerAllocator>
struct PoseCommand_
{
  typedef PoseCommand_<ContainerAllocator> Type;

  PoseCommand_()
    : f1(0.0)
    , f2(0.0)
    , f3(0.0)
    , preshape1(0.0)
    , preshape2(0.0)  {
    }
  PoseCommand_(const ContainerAllocator& _alloc)
    : f1(0.0)
    , f2(0.0)
    , f3(0.0)
    , preshape1(0.0)
    , preshape2(0.0)  {
  (void)_alloc;
    }



   typedef double _f1_type;
  _f1_type f1;

   typedef double _f2_type;
  _f2_type f2;

   typedef double _f3_type;
  _f3_type f3;

   typedef double _preshape1_type;
  _preshape1_type preshape1;

   typedef double _preshape2_type;
  _preshape2_type preshape2;





  typedef boost::shared_ptr< ::reflex_one_msgs::PoseCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reflex_one_msgs::PoseCommand_<ContainerAllocator> const> ConstPtr;

}; // struct PoseCommand_

typedef ::reflex_one_msgs::PoseCommand_<std::allocator<void> > PoseCommand;

typedef boost::shared_ptr< ::reflex_one_msgs::PoseCommand > PoseCommandPtr;
typedef boost::shared_ptr< ::reflex_one_msgs::PoseCommand const> PoseCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reflex_one_msgs::PoseCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reflex_one_msgs::PoseCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::reflex_one_msgs::PoseCommand_<ContainerAllocator1> & lhs, const ::reflex_one_msgs::PoseCommand_<ContainerAllocator2> & rhs)
{
  return lhs.f1 == rhs.f1 &&
    lhs.f2 == rhs.f2 &&
    lhs.f3 == rhs.f3 &&
    lhs.preshape1 == rhs.preshape1 &&
    lhs.preshape2 == rhs.preshape2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::reflex_one_msgs::PoseCommand_<ContainerAllocator1> & lhs, const ::reflex_one_msgs::PoseCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace reflex_one_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::reflex_one_msgs::PoseCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reflex_one_msgs::PoseCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflex_one_msgs::PoseCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflex_one_msgs::PoseCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflex_one_msgs::PoseCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflex_one_msgs::PoseCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reflex_one_msgs::PoseCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54581f1ad39d8a8e2956a7e64a8b1167";
  }

  static const char* value(const ::reflex_one_msgs::PoseCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54581f1ad39d8a8eULL;
  static const uint64_t static_value2 = 0x2956a7e64a8b1167ULL;
};

template<class ContainerAllocator>
struct DataType< ::reflex_one_msgs::PoseCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reflex_one_msgs/PoseCommand";
  }

  static const char* value(const ::reflex_one_msgs::PoseCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reflex_one_msgs::PoseCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Position in radians of various motors\n"
"float64 f1\n"
"float64 f2\n"
"float64 f3\n"
"float64 preshape1\n"
"float64 preshape2\n"
;
  }

  static const char* value(const ::reflex_one_msgs::PoseCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reflex_one_msgs::PoseCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.f1);
      stream.next(m.f2);
      stream.next(m.f3);
      stream.next(m.preshape1);
      stream.next(m.preshape2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reflex_one_msgs::PoseCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reflex_one_msgs::PoseCommand_<ContainerAllocator>& v)
  {
    s << indent << "f1: ";
    Printer<double>::stream(s, indent + "  ", v.f1);
    s << indent << "f2: ";
    Printer<double>::stream(s, indent + "  ", v.f2);
    s << indent << "f3: ";
    Printer<double>::stream(s, indent + "  ", v.f3);
    s << indent << "preshape1: ";
    Printer<double>::stream(s, indent + "  ", v.preshape1);
    s << indent << "preshape2: ";
    Printer<double>::stream(s, indent + "  ", v.preshape2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REFLEX_ONE_MSGS_MESSAGE_POSECOMMAND_H
